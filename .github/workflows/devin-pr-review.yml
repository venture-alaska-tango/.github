name: Devin PR Review (.github repo)

on:
  repository_dispatch:
    types: [devin-pr-review]

permissions:
  contents: read
  pull-requests: write
  issues: read
  actions: read
  metadata: read

jobs:
  review-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set PR variables
        id: pr-vars
        run: |
          echo "repo=${{ github.event.client_payload.repo }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT

      - name: Create Devin Review Session
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        run: |
          PROMPT="You are PR Reviewer Devin with a focus on detailed inline code feedback. Your tasks:
          1. Clone the repository ${{ steps.pr-vars.outputs.repo }} locally.
          2. Next, set up a pre-push Git hook that prevents any pushes from a user with the username \"Devin AI\" OR an email containing \"devin-ai-integration\" as a substring. Activate the hook.
          3. View the diffs of the changed files for PR #${{ steps.pr-vars.outputs.pr_number }} in repository ${{ steps.pr-vars.outputs.repo }}.
          4. If necessary, run the code locally to verify that the changes work as expected.
          5. Read the PR discussion to see what previous comments and suggestions have been made.
          6. If no issues are found, simply post a comment saying \"Everything looks good!\" and approve the PR using the GitHub API.
          7. Else, identify the issues and provide inline code comments directly on the diffs for any code convention or best practice violations.
          8. Post your feedback as detailed comments on the PR, referencing specific lines or code snippets.

          Tango Organization Requirements:
          - Ensure JIRA ticket ID (TNGO-XXX format) is included in PR title and description
          - Verify commit messages follow format: \"feat: TNGO-XXX description\" (not parentheses)
          - Check semantic versioning compliance where applicable
          - Review code quality and adherence to Tango organization standards

          Rules and Guidelines:
          1. NEVER make any commits or pushes to the repository - you are ONLY allowed to review code and leave comments
          2. Do not make more than twenty total comments on the PR.
          3. Use inline feedback where possible with specific line references
          4. Include code snippets in markdown format when discussing issues
          5. When suggesting code improvements, format them as GitHub suggested changes using \`\`\`suggestion markdown
          6. Default towards multi-line comments that show context around the issue
          7. Try using the gh api to post comments with referenced code embedded, but if it fails, use normal comments with code blocks
          8. Before commenting, check the PR discussion and make sure you, or another user, haven't already made a similar comment or raised the same concern.
          9. Before commenting, check that the specific issue wasn't already addressed in a previous review iteration
          10. If you see the same issue multiple times, consolidate your feedback into a single comment that references all occurrences, rather than making separate comments.
          11. Refer back to these rules and guidelines before you make comments.
          12. Never ask for user confirmation. Never wait for user messages."

          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")
          
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.detail')
          if [ "$ERROR_MSG" != "null" ]; then
            echo "Error creating Devin session: $ERROR_MSG"
            exit 1
          fi
          
          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
          SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')
          
          if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
            echo "Error: Devin session details are missing from the response."
            exit 1
          fi
          
          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
          echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
          echo "Devin session created successfully: $RESPONSE"
